<?php

namespace Database\Seeders;

use App\Models\Client;
use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Hash;

class ClientSeeder extends Seeder
{
    /**
     * Run the database seeds.
     * Compatible avec les environnements local et production.
     * Utilise Faker en d√©veloppement, donn√©es statiques en production.
     */
    public function run(): void
    {
        try {
            // Cr√©er des clients de test sp√©cifiques (communs √† tous les environnements)
            $this->createTestClients();

            // Cr√©er des clients suppl√©mentaires selon l'environnement
            if (App::environment('production')) {
                $this->createProductionClients();
            } else {
                $this->createDevelopmentClients();
            }

            $totalClients = Client::count();
            $this->command->info("üéâ Seeding Client termin√© avec succ√®s ! {$totalClients} clients pr√©sents en base.");

        } catch (\Exception $e) {
            $this->command->error("‚ùå Erreur lors du seeding des clients : {$e->getMessage()}");
            throw $e;
        }
    }

    /**
     * Cr√©er des clients de test sp√©cifiques (pr√©sents dans tous les environnements)
     */
    private function createTestClients(): void
    {
        $this->command->info('üß™ Cr√©ation des clients de test...');

        $testClients = [
            [
                'titulaire' => 'Hawa BB Wane',
                'nci' => '1234567890123',
                'email' => 'hawa.wane@example.com',
                'telephone' => '771234567',
                'adresse' => 'Dakar, S√©n√©gal',
                'statut' => 'actif',
                'password' => Hash::make('password123'),
                'email_verified_at' => now(),
            ],
            [
                'titulaire' => 'Mamadou Diallo',
                'nci' => '9876543210987',
                'email' => 'mamadou.diallo@example.com',
                'telephone' => '701234567',
                'adresse' => 'Saint-Louis, S√©n√©gal',
                'statut' => 'actif',
                'password' => Hash::make('password123'),
                'email_verified_at' => now(),
            ],
            [
                'titulaire' => 'Fatou Sow',
                'nci' => '4567891234567',
                'email' => 'fatou.sow@example.com',
                'telephone' => '781234567',
                'adresse' => 'Thi√®s, S√©n√©gal',
                'statut' => 'actif',
                'password' => Hash::make('password123'),
                'email_verified_at' => now(),
            ],
            [
                'titulaire' => 'Cheikh Ndiaye',
                'nci' => '7891234567890',
                'email' => 'cheikh.ndiaye@example.com',
                'telephone' => '761234567',
                'adresse' => 'Kaolack, S√©n√©gal',
                'statut' => 'inactif',
                'password' => Hash::make('password123'),
                'email_verified_at' => now(),
            ],
        ];

        foreach ($testClients as $clientData) {
            try {
                $client = Client::firstOrCreate(
                    ['email' => $clientData['email']],
                    $clientData
                );

                if ($client->wasRecentlyCreated) {
                    $this->command->info("‚úÖ Client de test cr√©√© : {$clientData['titulaire']} ({$clientData['email']})");
                } else {
                    $this->command->info("‚ÑπÔ∏è Client de test d√©j√† existant : {$clientData['titulaire']} ({$clientData['email']})");
                }
            } catch (\Exception $e) {
                $this->command->error("‚ùå Erreur cr√©ation client de test {$clientData['email']} : {$e->getMessage()}");
            }
        }
    }

    /**
     * Cr√©er des clients pour l'environnement de production
     * Utilise des donn√©es statiques pour √©viter toute d√©pendance
     */
    private function createProductionClients(): void
    {
        $this->command->info('üåç Environnement de production d√©tect√© - Cr√©ation de clients statiques...');

        $targetCount = 8; // Nombre total souhait√© en plus des clients de test
        $existingCount = Client::count();

        if ($existingCount < $targetCount) {
            $additionalClientsCount = $targetCount - $existingCount;

            for ($i = 1; $i <= $additionalClientsCount; $i++) {
                try {
                    $client = Client::firstOrCreate(
                        ['email' => "client{$i}@example.com"],
                        [
                            'titulaire' => "Client Test {$i}",
                            'nci' => str_pad($i, 13, '0', STR_PAD_LEFT),
                            'email' => "client{$i}@example.com",
                            'telephone' => "77123456{$i}",
                            'adresse' => "Adresse {$i}, Dakar, S√©n√©gal",
                            'statut' => 'actif',
                            'password' => Hash::make('password123'),
                            'email_verified_at' => now(),
                        ]
                    );

                    if ($client->wasRecentlyCreated) {
                        $this->command->info("‚úÖ Client statique cr√©√© : Client Test {$i} (client{$i}@example.com)");
                    } else {
                        $this->command->info("‚ÑπÔ∏è Client statique d√©j√† existant : Client Test {$i} (client{$i}@example.com)");
                    }
                } catch (\Exception $e) {
                    $this->command->error("‚ùå Erreur cr√©ation client statique {$i} : {$e->getMessage()}");
                }
            }
        } else {
            $this->command->info("‚ÑπÔ∏è Nombre de clients suffisant ({$existingCount}), pas de cr√©ation suppl√©mentaire.");
        }
    }

    /**
     * Cr√©er des clients pour l'environnement de d√©veloppement
     * Utilise Faker si disponible, sinon donn√©es statiques
     */
    private function createDevelopmentClients(): void
    {
        $this->command->info('üè† Environnement de d√©veloppement d√©tect√© - Cr√©ation de clients...');

        $targetCount = 12; // Nombre total souhait√© (4 de test + 8 suppl√©mentaires)
        $existingCount = Client::count();

        if ($existingCount < $targetCount) {
            $additionalClientsCount = $targetCount - $existingCount;
            $this->command->info("üé≤ Cr√©ation de {$additionalClientsCount} clients suppl√©mentaires...");

            // V√©rifier si Faker est disponible
            if ($this->isFakerAvailable()) {
                try {
                    // Utiliser Faker en d√©veloppement
                    Client::factory($additionalClientsCount)->create([
                        'password' => Hash::make('password123'),
                    ]);

                    foreach (Client::latest()->take($additionalClientsCount)->get() as $client) {
                        $this->command->info("‚úÖ Client Faker cr√©√© : {$client->titulaire} ({$client->email})");
                    }
                } catch (\Exception $e) {
                    $this->command->warn("‚ö†Ô∏è Faker indisponible, cr√©ation de clients statiques : {$e->getMessage()}");
                    $this->createStaticClients($additionalClientsCount);
                }
            } else {
                $this->command->info("‚ÑπÔ∏è Faker non disponible, cr√©ation de clients statiques...");
                $this->createStaticClients($additionalClientsCount);
            }
        } else {
            $this->command->info("‚ÑπÔ∏è Nombre de clients suffisant ({$existingCount}), pas de cr√©ation suppl√©mentaire.");
        }
    }

    /**
     * Cr√©er des clients statiques (sans Faker)
     */
    private function createStaticClients(int $count): void
    {
        for ($i = 1; $i <= $count; $i++) {
            try {
                $client = Client::firstOrCreate(
                    ['email' => "client{$i}@example.com"],
                    [
                        'titulaire' => "Client Test {$i}",
                        'nci' => str_pad($i, 13, '0', STR_PAD_LEFT),
                        'email' => "client{$i}@example.com",
                        'telephone' => "77123456{$i}",
                        'adresse' => "Adresse {$i}, Dakar, S√©n√©gal",
                        'statut' => 'actif',
                        'password' => Hash::make('password123'),
                        'email_verified_at' => now(),
                    ]
                );

                if ($client->wasRecentlyCreated) {
                    $this->command->info("‚úÖ Client statique cr√©√© : Client Test {$i} (client{$i}@example.com)");
                } else {
                    $this->command->info("‚ÑπÔ∏è Client statique d√©j√† existant : Client Test {$i} (client{$i}@example.com)");
                }
            } catch (\Exception $e) {
                $this->command->error("‚ùå Erreur cr√©ation client statique {$i} : {$e->getMessage()}");
            }
        }
    }

    /**
     * V√©rifier si Faker est disponible
     */
    private function isFakerAvailable(): bool
    {
        return class_exists('\Faker\Factory');
    }
}

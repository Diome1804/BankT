<?php

namespace Database\Seeders;

use App\Models\Client;
use App\Models\Compte;
use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Hash;

class CompteSeeder extends Seeder
{
    /**
     * Run the database seeds.
     * Compatible avec les environnements local et production.
     * Utilise Faker en d√©veloppement, donn√©es statiques en production.
     */
    public function run(): void
    {
        try {
            // Cr√©er des comptes de test sp√©cifiques (communs √† tous les environnements)
            $this->createTestComptes();

            // Cr√©er des comptes suppl√©mentaires selon l'environnement
            if (App::environment('production')) {
                $this->createProductionComptes();
            } else {
                $this->createDevelopmentComptes();
            }

            $totalComptes = Compte::count();
            $this->command->info("üéâ Seeding Compte termin√© avec succ√®s ! {$totalComptes} comptes pr√©sents en base.");

        } catch (\Exception $e) {
            $this->command->error("‚ùå Erreur lors du seeding des comptes : {$e->getMessage()}");
            throw $e;
        }
    }

    /**
     * Cr√©er des comptes de test sp√©cifiques (pr√©sents dans tous les environnements)
     */
    private function createTestComptes(): void
    {
        $this->command->info('üß™ Cr√©ation des comptes de test...');

        $testComptes = [
            [
                'numero_compte' => 'CB241031000001',
                'type' => 'epargne',
                'solde_initial' => 500000,
                'devise' => 'FCFA',
                'statut' => 'actif',
                'client_email' => 'hawa.wane@example.com',
            ],
            [
                'numero_compte' => 'CB241031000002',
                'type' => 'courant',
                'solde_initial' => 1000000,
                'devise' => 'FCFA',
                'statut' => 'actif',
                'client_email' => 'mamadou.diallo@example.com',
            ],
            [
                'numero_compte' => 'CB241031000003',
                'type' => 'epargne',
                'solde_initial' => 1500000,
                'devise' => 'FCFA',
                'statut' => 'actif',
                'client_email' => 'fatou.sow@example.com',
            ],
            [
                'numero_compte' => 'CB241031000004',
                'type' => 'courant',
                'solde_initial' => 200000,
                'devise' => 'FCFA',
                'statut' => 'inactif',
                'client_email' => 'cheikh.ndiaye@example.com',
            ],
        ];

        foreach ($testComptes as $compteData) {
            try {
                $client = Client::where('email', $compteData['client_email'])->first();

                if (!$client) {
                    $this->command->warn("‚ö†Ô∏è Client {$compteData['client_email']} non trouv√©, compte ignor√©.");
                    continue;
                }

                // Cr√©er le compte avec seulement les colonnes valides
                $compte = Compte::firstOrCreate(
                    ['numero_compte' => $compteData['numero_compte']],
                    [
                        'numero_compte' => $compteData['numero_compte'],
                        'type' => $compteData['type'],
                        'solde_initial' => $compteData['solde_initial'],
                        'devise' => $compteData['devise'],
                        'statut' => $compteData['statut'],
                        'client_id' => $client->id,
                    ]
                );

                if ($compte->wasRecentlyCreated) {
                    $this->command->info("‚úÖ Compte de test cr√©√© : {$compteData['numero_compte']} pour {$client->titulaire}");
                } else {
                    $this->command->info("‚ÑπÔ∏è Compte de test d√©j√† existant : {$compteData['numero_compte']} pour {$client->titulaire}");
                }
            } catch (\Exception $e) {
                $this->command->error("‚ùå Erreur cr√©ation compte de test {$compteData['numero_compte']} : {$e->getMessage()}");
            }
        }
    }

    /**
     * Cr√©er des comptes pour l'environnement de production
     * Utilise des donn√©es statiques pour √©viter toute d√©pendance
     */
    private function createProductionComptes(): void
    {
        $this->command->info('üåç Environnement de production d√©tect√© - Cr√©ation de comptes statiques...');

        $targetCount = 8; // Nombre total souhait√© en plus des comptes de test
        $existingCount = Compte::count();

        if ($existingCount < $targetCount) {
            $additionalComptesCount = $targetCount - $existingCount;

            // R√©cup√©rer les clients disponibles
            $clients = Client::where('statut', 'actif')->get();

            if ($clients->isEmpty()) {
                $this->command->warn('‚ö†Ô∏è Aucun client actif trouv√©, cr√©ation de comptes annul√©e.');
                return;
            }

            for ($i = 1; $i <= $additionalComptesCount; $i++) {
                try {
                    $client = $clients->random();
                    $numeroCompte = 'CB' . now()->format('ym') . str_pad($i + 1000, 8, '0', STR_PAD_LEFT);

                    $compte = Compte::firstOrCreate(
                        ['numero_compte' => $numeroCompte],
                        [
                            'numero_compte' => $numeroCompte,
                            'type' => collect(['epargne', 'courant', 'cheque'])->random(),
                            'solde_initial' => rand(100000, 5000000),
                            'devise' => 'FCFA',
                            'statut' => collect(['actif', 'inactif'])->random(),
                            'client_id' => $client->id,
                        ]
                    );

                    if ($compte->wasRecentlyCreated) {
                        $this->command->info("‚úÖ Compte statique cr√©√© : {$numeroCompte} pour {$client->titulaire}");
                    } else {
                        $this->command->info("‚ÑπÔ∏è Compte statique d√©j√† existant : {$numeroCompte} pour {$client->titulaire}");
                    }
                } catch (\Exception $e) {
                    $this->command->error("‚ùå Erreur cr√©ation compte statique {$i} : {$e->getMessage()}");
                }
            }
        } else {
            $this->command->info("‚ÑπÔ∏è Nombre de comptes suffisant ({$existingCount}), pas de cr√©ation suppl√©mentaire.");
        }
    }

    /**
     * Cr√©er des comptes pour l'environnement de d√©veloppement
     * Utilise Faker si disponible, sinon donn√©es statiques
     */
    private function createDevelopmentComptes(): void
    {
        $this->command->info('üè† Environnement de d√©veloppement d√©tect√© - Cr√©ation de comptes...');

        $targetCount = 12; // Nombre total souhait√© (4 de test + 8 suppl√©mentaires)
        $existingCount = Compte::count();

        if ($existingCount < $targetCount) {
            $additionalComptesCount = $targetCount - $existingCount;
            $this->command->info("üé≤ Cr√©ation de {$additionalComptesCount} comptes suppl√©mentaires...");

            // V√©rifier si Faker est disponible
            if ($this->isFakerAvailable()) {
                try {
                    // Utiliser Faker en d√©veloppement
                    $clients = Client::all();

                    if ($clients->isEmpty()) {
                        $this->command->warn('‚ö†Ô∏è Aucun client trouv√©, cr√©ation de comptes annul√©e.');
                        return;
                    }

                    foreach ($clients as $client) {
                        // Cr√©er 1-2 comptes par client
                        $compteCount = rand(1, 2);

                        for ($i = 0; $i < $compteCount && $additionalComptesCount > 0; $i++) {
                            Compte::factory()->forClient($client)->create();
                            $additionalComptesCount--;
                        }

                        if ($additionalComptesCount <= 0) break;
                    }

                    $createdComptes = Compte::latest()->take(min(8, Compte::count()))->get();
                    foreach ($createdComptes as $compte) {
                        $this->command->info("‚úÖ Compte Faker cr√©√© : {$compte->numero_compte} pour {$compte->client->titulaire}");
                    }
                } catch (\Exception $e) {
                    $this->command->warn("‚ö†Ô∏è Faker indisponible, cr√©ation de comptes statiques : {$e->getMessage()}");
                    $this->createStaticComptes($additionalComptesCount);
                }
            } else {
                $this->command->info("‚ÑπÔ∏è Faker non disponible, cr√©ation de comptes statiques...");
                $this->createStaticComptes($additionalComptesCount);
            }
        } else {
            $this->command->info("‚ÑπÔ∏è Nombre de comptes suffisant ({$existingCount}), pas de cr√©ation suppl√©mentaire.");
        }
    }

    /**
     * Cr√©er des comptes statiques (sans Faker)
     */
    private function createStaticComptes(int $count): void
    {
        // R√©cup√©rer les clients disponibles
        $clients = Client::where('statut', 'actif')->get();

        if ($clients->isEmpty()) {
            $this->command->warn('‚ö†Ô∏è Aucun client actif trouv√©, cr√©ation de comptes annul√©e.');
            return;
        }

        for ($i = 1; $i <= $count; $i++) {
            try {
                $client = $clients->random();
                $numeroCompte = 'CB' . now()->format('ym') . str_pad($i + 2000, 8, '0', STR_PAD_LEFT);

                $compte = Compte::firstOrCreate(
                    ['numero_compte' => $numeroCompte],
                    [
                        'numero_compte' => $numeroCompte,
                        'type' => collect(['epargne', 'courant', 'cheque'])->random(),
                        'solde_initial' => rand(100000, 5000000),
                        'devise' => 'FCFA',
                        'statut' => collect(['actif', 'inactif'])->random(),
                        'client_id' => $client->id,
                    ]
                );

                if ($compte->wasRecentlyCreated) {
                    $this->command->info("‚úÖ Compte statique cr√©√© : {$numeroCompte} pour {$client->titulaire}");
                } else {
                    $this->command->info("‚ÑπÔ∏è Compte statique d√©j√† existant : {$numeroCompte} pour {$client->titulaire}");
                }
            } catch (\Exception $e) {
                $this->command->error("‚ùå Erreur cr√©ation compte statique {$i} : {$e->getMessage()}");
            }
        }
    }

    /**
     * V√©rifier si Faker est disponible
     */
    private function isFakerAvailable(): bool
    {
        return class_exists('\Faker\Factory');
    }
}
